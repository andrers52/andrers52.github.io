"use strict";import Assert from"../util/assert.js";var EFunction={};EFunction.sequence=((e,r,s)=>{Assert.assertIsFunction(e),Assert.assertIsFunction(r),Assert.assert(s,"No function running context found.");let t=s||this,n=e.bind(t),o=r.bind(t);return e=>(n(e),o(e))}),EFunction.compose=((e,r,s)=>{Assert.assertIsFunction(e),Assert.assertIsFunction(r),Assert.assert(s,"No function running context found.");let t=s||this,n=e.bind(t),o=r.bind(t),i=null;return e=>(i=o(e),n(i))}),EFunction.memoize=(e=>{let r={};let s=0;return t=>t in r?r[t]:s<1e6?(s++,r[t]=e(t)):e(t)}),EFunction.limitCallingRateWithDiscard=((e,r)=>{let s=!0;return t=>{if(s)return s=!1,setTimeout(()=>{s=!0},r),e(t)}});var observedFncId=0,observedToObservers={};function runObservers(e){observedToObservers[e].forEach(e=>{e()})}EFunction.registerObserver=((e,r)=>{let s;return observedToObservers[e.id]?(observedToObservers[e.id].push(r),s=e):(e.id=observedFncId++,observedToObservers[e.id]=[r],s=(r=>{e(r),runObservers(e.id)})),s}),EFunction.unregisterObserver=((e,r)=>observedToObservers[e.id]?(observedToObservers[e.id]=observedToObservers[e.id].filter(e=>e!==r),e):e);export default EFunction;