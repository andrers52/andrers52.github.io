"use strict";var Assert={disableAllVerifications:!1,assert:function(s,r){if(!Assert.disableAllVerifications){if(!s||void 0===s)throw r||"Error";return!0}},assertHasProperties:function(s,r,t){r.forEach(r=>{Assert.hasProperty(s,r,t)})},hasProperty:function(s,r,t){Assert.assert(s[r],t||"Property not found")},assertIsEqual:function(s,r,t){Assert.assert(s===r,t||"Elements must be equal")},assertIsValidString:function(s,r,t){let e=r;Assert.assert(e.includes(s),t||s+" is not a valid string")},assertIsFunction:function(s,r){r=r||"Error: expecting a function",Assert.assert("function"==typeof s,r)},assertIsObject:function(s,r){r=r||"Error: expecting an object",Assert.assert("object"==typeof s,r)},assertIsOptionalFunction:function(s,r){r=r||"Error: expecting a(n optional) function",s&&Assert.assert("function"==typeof s,r)},assertIsNumber:function(s,r){r=r||"Error: expecting a number",Assert.assert("number"==typeof s&&!isNaN(parseFloat(s))&&isFinite(s),r)},assertIsString:function(s,r){r=r||"Error: expecting a string",Assert.assert("string"==typeof s,r)},assertIsArray:function(s,r){r=r||"Error: expecting an array",Assert.assert(Array.isArray(s),r)},assertIsArrayOfNumbers:function(s,r){Assert.disableAllVerifications&&(r=r||"Error: expecting an array of numbers",Assert.assertIsArray(s,r),s.forEach(s=>Assert.assertIsNumber(s,r)))},assertIsArrayOfObjects:function(s,r){Assert.disableAllVerifications&&(r=r||"Error: expecting an array of objects",Assert.assertIsArray(s,r),s.forEach(s=>Assert.assertIsObject(s,r)))},assertIsLiteralString:function(s,r){r=r||"Error: expecting a literal string",Assert.assert("string"==typeof s,r)},assertValueIsInsideLimits:function(s,r,t,e){e=e||"Error: value out of limits",Assert.assert(s>=r&&s<=t,e)},disable:()=>{Assert.assert=Assert.assertIsEqual=Assert.assertIsValidString=Assert.assertIsFunction=Assert.assertIsOptionalFunction=Assert.assertIsNumber=Assert.assertIsArray=Assert.assertIsArrayOfNumbers=Assert.assertIsLiteralString=Assert.assertValueIsInsideLimits=(()=>{})}};export default Assert;