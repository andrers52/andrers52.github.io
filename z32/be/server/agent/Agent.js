"use strict";import Assert from"../../libs/arslib/util/assert.js";import Rectangle,{rect}from"../../common/geometry/Rectangle.js";import Vector from"../../common/geometry/Vector.js";import environment from"./singleton/Environment.js";function agentInitialize(e,t,i){if(this.isAlive=!0,this.imageName=null,this.isVisible=!0,this.isSolid=i,this.onMouseMoveHitLatencyInMillis=10,this.worldRectangle=environment.getWorldRectangle(),this.rectangle=t||new Rectangle,this.imageName=e,this.die=function(){this.isAlive=!1,environment.removeAgent(this)},this.equal=function(e){return this.id===e.id},this.isSolid){let e=environment.otherAgentOverlappingWithProposedRectangle(this,this.rectangle);if(e&&e.isSolid)return null}return environment.addAgent(this),this}let createAgent=function(e,t=100,i=100,n=!0,o=0,r=0){return createAgentWithRectangle(e,rect(o,r,t,i),n)},createAgentWithRectangle=function(e,t,i=!0){let n=Object.create(proto);return agentInitialize.call(n,e,t,i)},proto={isUserAgent(){return Number.isInteger(this.userId)},setSize(e){return this.rectangle.size=e,this},getSize(){return this.rectangle.size},getPosition(){return this.rectangle.getPosition()},checkHit(e){return this.rectangle.checkPointInside(e)},checkCollision(e){return this.rectangle.checkIntersection(e.rectangle)},set2DPosition(e,t){let i=this.getPosition().vectorDistance(e);return this.move(i,t)},setPosition(e,t){let i=this.getPosition().vectorDistance(e);return this.move(i,t)},forceMove(e){return Assert.assert("number"==typeof e.x&&"number"==typeof e.y),Assert.assert(!isNaN(e.x)&&!isNaN(e.y)),this.rectangle.move(e),environment.updateAgent(this),this},checkMove(e){let t=this.rectangle.clone();if(t.move(e),!this.worldRectangle.checkInside(t))return this.onHittingWorldBorder&&this.onHittingWorldBorder(),null;let i=environment.otherAgentOverlappingWithProposedRectangle(this,t);if(!i||!i.isAlive||i.isCamera)return e;if(this.isSolid&&i.isSolid){if(this.onCollision&&this.onCollision(i),i.onCollision&&i.onCollision(this),this.rectangle.isMovingToInsideOfOtherRectangle(e,i.rectangle))return null}else this.isVisible&&i.isVisible&&(this.onOverlapping&&this.onOverlapping(i),i.onOverlapping&&i.onOverlapping(this));return this.isAlive?e:null},move(e,t){if(t||this.isCamera)return this.forceMove(e),!0;if(!e.x&&!e.y)return!0;let i=this.checkMove(e);return!!i&&(Assert.assertIsNumber(i.x),Assert.assertIsNumber(i.y),this.forceMove(i),!0)},moveUp(e,t){return e=void 0===e?1:e,this.move(new Vector(0,e),t)},moveDown(e,t){return e=void 0===e?1:e,this.move(new Vector(0,-e),t)},moveLeft(e,t){return e=void 0===e?1:e,this.move(new Vector(-e,0),t)},moveRight(e,t){return e=void 0===e?1:e,this.move(new Vector(e,0),t)},snapToAgent(e){return this.rectangle=e.rectangle,this},moveTowardsPosition(e,t){let i=this.getPosition().vectorDistance(e),n=i.clone().adjustToSize(t);return t>i.size()?this.move(i):this.move(n),this},moveTowardsAnotherAgent(e,t){return this.moveTowardsPosition(e.getPosition(),t),this},moveTowardsOrientation(e,t,i){t=t||this.orientation||0;let n=Vector.makeFromAngleAndSize(t,e);return this.move(n,i)},setPositionRelativeToAgent(e,t,i="inside",n=0,o=!1){let r=this.rectangle.clone();return r.setPositionRelativeToRectangle(e.rectangle,t,i,n),this.setPosition(r.center,o)},moveRelativeToAgent(e,t,i,n){let o={above:"topCenter",below:"bottomCenter",left:"leftCenter",right:"rightCenter",aboveRight:"topRight",aboveLeft:"topleft",belowRight:"bottomRight",belowLeft:"bottomLeft"};Assert.assertIsValidString(t,Object.keys(o),"Invalid agent relative position"),i=i||1;let r=this.rectangle.clone();return r.setPositionRelativeToRectangle(e.rectangle,o[t],"outside",i),this.setPosition(r.center,n),this}};export{createAgent,createAgentWithRectangle};