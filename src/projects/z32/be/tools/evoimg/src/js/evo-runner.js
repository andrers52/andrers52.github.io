"use strict";import Assert from"../lib/arslib/util/assert.js";import Util from"../lib/arslib/util/util.js";import EArray from"../lib/arslib/enhancements/e-array.js";import Evolver from"../lib/arslib/geneticComputing/Evolver.js";export default function EvoRunner(r,e,t,a){let n=t.length;let i=new function(r){this.convert=function(e){return EArray.unflatten(e,r,!0).map(r=>((r,e)=>(Assert.assertIsArray(r,"coerceValues(arrayToCoerce:Array, minMaxArray:Array)"),Assert.assertIsArray(e,"coerceValues(arrayToCoerce:Array, minMaxArray:Array)"),Assert.assertIsEqual(r.length,e.length,"'minMaxArray' must be in the form: [[min1,max1],[min2,max2],...,[minN,maxN]]"),r.map((r,t)=>{let n=e[t][0],i=e[t][1],s=Util.nonLinearCoerceValueToMinMax(r,n,i);return Number.isInteger(a[t])&&(s=Math.round(s)),Assert.assert(s>=n&&s<=i,"coerceValues is flawed"),s})))(r,t))}}(n),s=new Evolver({input:Array.from(e),initialOutputSize:50*n,outputConvertFn:i.convert,evaluateFn:r,outputChangeNumUnits:n}),o=!0;function u(){o&&(s.exec(),window.requestAnimationFrame(u))}this.start=function(){u()},this.startStop=function(){o=!o}};