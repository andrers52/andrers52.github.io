"use strict";import Assert from"../../libs/arslib/util/assert.js";import Vector,{vect}from"../../common/geometry/Vector.js";import coordinatesConversion from"./CoordinatesConversion.js";import screen from"./Screen.js";function UserEvents(){let propagate=()=>{},mouseCanvasPosition=null,mousePositionChanged=!1;function getMouseCanvasPosition(e){e.touches&&(e.clientX=e.touches.item(0).clientX,e.clientY=e.touches.item(0).clientY);let o=screen.getCanvas().getBoundingClientRect();return new Vector(e.clientX-o.left,e.clientY-o.top)}function onKeyDown(e){propagate("onKeyDown",e.key.replace(/\"/g,""))}function onResizeCanvas(e){screen.getCanvas()&&propagate("onResizeCanvas",vect(screen.getCanvas().width,screen.getCanvas().height))}function onMouseDown(e){propagate("onMouseDown",userEvents.mouseWorldPosition()),e.stopPropagation()}function onMouseUp(e){mouseCanvasPosition=getMouseCanvasPosition(e),propagate("onMouseUp",userEvents.mouseWorldPosition())}function onMouseMove(e){e.preventDefault(),mouseCanvasPosition=getMouseCanvasPosition(e),mousePositionChanged=!0}this.mouseWorldPosition=function(){return coordinatesConversion.canvasToWorld(mouseCanvasPosition)};let eventsMapping={onResizeCanvas:["window.onresize","window.onresize"],onMouseDown:["window.onmousedown","window.touchstart"],onMouseMove:["window.onmousemove","window.touchmove"],onMouseUp:["window.onmouseup","window.touchend","window.touchleave"]};function propagateMouseMoveOnInterval(){mousePositionChanged&&(propagate("onMouseMove",userEvents.mouseWorldPosition()),mousePositionChanged=!1)}function treatTouchMove(e){e.preventDefault(),mouseCanvasPosition=getMouseCanvasPosition(e),propagate("onMouseMove",userEvents.mouseWorldPosition()),preventMotion(e)}function preventMotion(e){window.scrollTo(0,0),e.preventDefault(),e.stopPropagation()}this.enableEvent=function(handler){Assert.assertIsValidString(handler,Object.keys(eventsMapping),"Non valid event handler"),eventsMapping[handler].forEach(event=>eval(event+" = "+handler+";"))},this.disableEvent=function(handler){Assert.assertIsValidString(handler,Object.keys(eventsMapping),"Non valid event handler"),eventsMapping[handler].forEach(event=>eval(event+" = null;"))},this.start=function(e,o){propagate=o,Object.keys(eventsMapping).forEach(e=>this.enableEvent(e)),setInterval(propagateMouseMoveOnInterval,e)},this.stop=function(){Object.keys(eventsMapping).forEach(e=>this.disableEvent(e))},window.addEventListener("scroll",preventMotion,!1),window.addEventListener("touchmove",treatTouchMove,!1)}let userEvents=new UserEvents;export default userEvents;