"use strict";import Assert from"../../node_modules/arslib/util/assert.js";import{Util}from"../../node_modules/arslib/util/util.js";import EArray from"../../node_modules/arslib/enhancements/e-array.js";import Evolver from"../../node_modules/ars-genetic-programming/evolver.js";export default function EvoRunner(r,e,t,n){let a=t.length;let s=new function(r){this.convert=function(e){return EArray.unflatten(e,r,!0).map(r=>((r,e)=>(Assert.assertIsArray(r,"coerceValues(arrayToCoerce:Array, minMaxArray:Array)"),Assert.assertIsArray(e,"coerceValues(arrayToCoerce:Array, minMaxArray:Array)"),Assert.assertIsEqual(r.length,e.length,"'minMaxArray' must be in the form: [[min1,max1],[min2,max2],...,[minN,maxN]]"),r.map((r,t)=>{let a=e[t][0],s=e[t][1],o=Util.nonLinearCoerceValueToMinMax(r,a,s);return Number.isInteger(n[t])&&(o=Math.round(o)),Assert.assert(o>=a&&o<=s,"coerceValues is flawed"),o})))(r,t))}}(a),o=new Evolver({input:Array.from(e),initialOutputSize:50*a,outputConvertFn:s.convert,evaluateFn:r,outputChangeNumUnits:a}),i=!0;function u(){i&&(o.exec(),window.requestAnimationFrame(u))}this.start=function(){u()},this.pauseToggle=function(){i=!i}};